#!/usr/bin/env python3

"""
Test script for MPC to determine the waypoints via quadratic program
"""
import rospy
import cvxpy as cv
import numpy as np
from scipy import linalg
from waypoint_generation_library import WaypointGen
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d

PI = 3.14159
# degrees to radians
D2R = PI/180

thrustConstant = 8.54858e-06
momentConstant = 1.6e-2
g = 9.81    # [m/s^2]
m = 0.716   # [kg]
Ixx = 0.007 # [kg*m^2]
Iyy = 0.007 # [kg*m^2]
Izz = 0.012 # [kg*m^2]
I = np.array(([Ixx, 0, 0],
              [0, Iyy, 0],
              [0, 0, Izz]))
gamma = thrustConstant / momentConstant
dt = 0.1  # [sec]
L = 0.17    # [m]
# state update matrix
A = np.array([[1, 0, 0, dt, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, dt, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, dt, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 0, 0, dt*g, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, -dt*g, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0, dt, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, dt, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, dt],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]])
# input matrix
B = np.array([[0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [dt/m, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, dt/Ixx, 0, 0],
                [0, 0, dt/Iyy, 0],
                [0, 0, 0, dt/Izz]])
# gravity component of input
Bg = np.array([0,
                0,
                0,
                0,
                0,
                -g*dt,
                0,
                0,
                0,
                0,
                0,
                0])

speedAllocationMatrix = np.array([[thrustConstant, thrustConstant, thrustConstant, thrustConstant],
                                  [0,                 L*thrustConstant,  0,                (-1)*L*thrustConstant],
                                  [(-1)*L*thrustConstant,  0,          L*thrustConstant, 0],
                                  [momentConstant, (-1)*momentConstant, momentConstant, (-1)*momentConstant]])

equilibriumInput = np.zeros((4,1))
equilibriumInput[0] = m*g


QMult = 1
Q = QMult*np.eye(12)
Q[2][2] = 500/QMult
Q[8][8] = 10000/QMult
R = 1000*np.array([[1, 0, 0, 0],
                    [0, 5, 0, 0],
                    [0, 0, 5, 0],
                    [0, 0, 0, 0.00001]])

# the terminal cost
Uinf = linalg.solve_discrete_are(A, B, Q, R, None, None)
dlqrGain = np.dot(np.linalg.inv(R + np.dot(B.T, np.dot(Uinf, B))), np.dot(B.T, np.dot(Uinf, A)))   
eigVals, eigVec = linalg.eig((A - np.dot(B, dlqrGain)))
print(eigVals)
WaypointGeneration = WaypointGen()
desiredPos = WaypointGeneration.desiredPos
desiredTimes = WaypointGeneration.desiredTimes

mpcHorizon = 5
finalTime = np.amax(desiredTimes)

# number of inputs
nu = 4
# number of states
nx = 12

# set up the MPC problem
u = cv.Variable((nu, mpcHorizon))
x = cv.Variable((nx, mpcHorizon+1))
xInit = cv.Parameter(nx)                                 

xmin = np.array(([0, 0, 0, -5, -5, -5, 
                  -45*D2R, -45*D2R, -90*D2R, -20*D2R, -20*D2R, -20*D2R]))
xmax = np.array(([10, 10, 15, 5, 5, 5,
                  45*D2R, 45*D2R, 90*D2R, 20*D2R, 20*D2R, 20*D2R]))  
umin = np.array(([-m*g, -0.1, -0.1, -0.1]))
umax = np.array(([1.5*m*g, 0.1, 0.1, 0.1]))                   

def mpc_problem_def(xInit, xr):
    """ Function to setup the MPC problem given the reference state, initial state,
        corresponding infinite horizon discrete lqr gain matrices, and constraints"""
    objective = 0
    constraints = [x[:,0] == xInit]
    for k in range(mpcHorizon):
        objective += cv.quad_form(x[:,k] - xr, Q) + cv.quad_form(u[:,k], R)
        constraints += [x[:,k+1] == A@x[:,k] + B@(u[:,k] + np.array([m*g, 0, 0, 0])) + Bg]
        constraints += [xmin <= x[:,k], x[:,k] <= xmax]
        constraints += [umin <= u[:,k], u[:,k] <= umax]
    objective += cv.quad_form(x[:,mpcHorizon] - xr, Uinf)
    prob = cv.Problem(cv.Minimize(objective), constraints)

    return prob

def calc_ref_state(currTime):
    """ Function to calculate the reference state given the current time"""
    # find the closest index in desiredTimes corresponding to the current time
    nearestIdx = np.searchsorted(desiredTimes, currTime)

    if nearestIdx == 0:
        nearestIdx = 1
    elif nearestIdx >= np.size(desiredTimes):
        nearestIdx = np.size(desiredTimes)-1 
    
    refState = np.array([desiredPos[nearestIdx,0],
                          desiredPos[nearestIdx,1],
                          desiredPos[nearestIdx,2],
                          0,
                          0,
                          0,
                          0,
                          0,
                          desiredPos[nearestIdx,3],
                          0,
                          0,
                          0])
    
    return refState

def quad_nonlinear_eom(state, input):
    """ Function for nonlinear equations of motion of quadcopter """
    # RPY position and rate update
    prevAngPos = np.array(([state[6]], 
                           [state[7]], 
                           [state[8]]))
    prevAngVel = np.array(([state[9]],
                           [state[10]], 
                           [state[11]]))                        
    angAccel = np.array(([(input[1] + Iyy*prevAngVel[1,0]*prevAngVel[2,0] - Izz*prevAngVel[1,0]*prevAngVel[2,0])/Ixx],
                         [(input[2] - Ixx*prevAngVel[0,0]*prevAngVel[2,0] + Izz*prevAngVel[0,0]*prevAngVel[2,0])/Iyy],
                         [(input[3] + Ixx*prevAngVel[0,0]*prevAngVel[1,0] - Iyy*prevAngVel[0,0]*prevAngVel[1,0])/Izz]))
    angVel = prevAngVel + angAccel*dt
    angPos = prevAngPos + angVel*dt

    # XYZ position and rate update
    prevLinPos = np.array(([state[0]], 
                           [state[1]], 
                           [state[2]]))
    prevLinVel = np.array(([state[3]],
                           [state[4]], 
                           [state[5]]))  

    gravityComponent = np.array(([0],
                                 [0],
                                 [-g]))
    # 1-2-3 rotation matrix of inertial in body frame
    rotMatThirdCol = np.array(([np.cos(prevAngPos[2,0])*np.sin(prevAngPos[1,0])*np.cos(prevAngPos[0,0]) + np.sin(prevAngPos[2,0])*np.sin(prevAngPos[0,0])],
                               [np.sin(prevAngPos[2,0])*np.sin(prevAngPos[1,0])*np.cos(prevAngPos[0,0]) - np.cos(prevAngPos[2,0])*np.sin(prevAngPos[0,0])],
                               [np.cos(prevAngPos[1,0])*np.cos(prevAngPos[0,0])]))
    linAccel = gravityComponent + ((input[0] + m*g)/m)*rotMatThirdCol
    linVel = prevLinVel + linAccel*dt
    linPos = prevLinPos + linVel*dt

    nonLinState = np.vstack((linPos, linVel, angPos, angVel))
    nonLinState = np.ndarray.flatten(nonLinState)
    return nonLinState, angAccel, linAccel

def gen_waypoints(state, t0, idx, angAccel, linAccel):
    """ Function to generate position, velocity, and acceleration waypoints along with time vector"""
    # time
    timeVec[idx] = t0
    # position
    for i in range(0,3):
        waypoints[idx,i] = state[i]
    waypoints[idx,3] = state[8]
    # velocity
    for j in range(3,6):
        desVel[idx,j-3] = state[j]
    desVel[idx,3] = state[11]
    # acceleration
    for k in range(0,3):
        desAcc[idx,k] = linAccel[k]
    desAcc[idx,3] = angAccel[2]

    return timeVec, waypoints, desVel, desAcc
        

# initial state
x0 = np.zeros((12))
# simulation length in timesteps
simLen = int(finalTime / dt)
# initial time
t0 = 0

waypoints = np.zeros((simLen, 4))
desVel = np.zeros((simLen, 4))
desAcc = np.zeros((simLen, 4))
timeVec = np.zeros((simLen))
# do closed loop simulation
for i in range(simLen):
    xInit.value = x0
    xr = calc_ref_state(t0)
    prob = mpc_problem_def(xInit, xr)
    prob.solve(solver=cv.OSQP, warm_start=True, verbose=True)
    # prob.solve(warm_start=True, verbose=True)
    x0, angAccel, linAccel = quad_nonlinear_eom(x0, u[:,0].value)
    prevInput = u[:,0].value

    t0 = t0 + dt
    timeVec, waypoints, desVel, desAcc = gen_waypoints(x0, t0, i, angAccel, linAccel)
    print(x0)

# plot the waypoints    
figPos = plt.figure()
axPos = plt.axes(projection = '3d')
axPos.plot3D(desiredPos[:,0], desiredPos[:,1], desiredPos[:,2], 'ro')

pnt3d = axPos.scatter(waypoints[:,0], waypoints[:,1], waypoints[:,2], c = timeVec)
cbar = plt.colorbar(pnt3d)
cbar.set_label("Time [sec]")
# label the axes and give title
axPos.set_xlabel('X-Axis [m]')
axPos.set_ylabel('Y-Axis [m]')
axPos.set_zlabel('Z-Axis [m]')
axPos.set_title('Minimum Jerk Position Waypoints')

# plot the desired kinematics
figOtherKinematics = plt.figure()
figOtherKinematics.suptitle('Desired Kinematics in Inertial Frame')
# desired position waypoints
axPos = plt.subplot(311)
axPos.plot(timeVec, waypoints[:,0], '-r', label = '$x_b$')
axPos.plot(timeVec, waypoints[:,1], '-k', label = '$y_b$')
axPos.plot(timeVec, waypoints[:,2], '-b', label = '$z_b$')
# add the yaw legend
axPos.plot(np.nan, '-g', label = 'yaw')
axPos.legend(loc = 0)
plt.grid()
plt.xlabel('Time [sec]')
plt.ylabel('Position [m]')
# plt.title('Desired Position in Inertial Frame')
# desired yaw
axYaw = axPos.twinx()
axYaw.plot(timeVec, waypoints[:,3], '-g')
axYaw.set_ylabel('Yaw [rad]')

# desired velocity waypoints
axVel = plt.subplot(312)
axVel.plot(timeVec, desVel[:,0], '-r', label = '$v_{x,b}$')
axVel.plot(timeVec, desVel[:,1], '-k', label = '$v_{y,b}$')
axVel.plot(timeVec, desVel[:,2], '-b', label = '$v_{z,b}$')
# add the yaw legend
axVel.plot(np.nan, '-g', label = '$yaw_{rate}$')
axVel.legend(loc = 0)
plt.grid()
plt.xlabel('Time [sec]')
plt.ylabel('Velocity [m/s]')
# plt.title('Desired Velocity in Inertial Frame')
# desired yaw
axYawRate = axVel.twinx()
axYawRate.plot(timeVec, desVel[:,3], '-g')
axYawRate.set_ylabel('Yaw [rad/s]')

# desired acceleration waypoints
axAcc = plt.subplot(313)
axAcc.plot(timeVec, desAcc[:,0], '-r', label = '$a_{x,b}$')
axAcc.plot(timeVec, desAcc[:,1], '-k', label = '$a_{y,b}$')
axAcc.plot(timeVec, desAcc[:,2], '-b', label = '$a_{z,b}$')
# add the yaw legend
axAcc.plot(np.nan, '-g', label = '$yaw_{acc}$')
axAcc.legend(loc = 0)
plt.grid()
plt.xlabel('Time [sec]')
plt.ylabel('Acceleration [$m/s^2$]')
# plt.title('Desired Acceleration in Inertial Frame')
# desired yaw
axYawRate = axAcc.twinx()
axYawRate.plot(timeVec, desAcc[:,3], '-g')
axYawRate.set_ylabel('Yaw [$rad/s^2$]')
plt.show()
